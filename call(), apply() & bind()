
var pokemon = {
    firstname: 'Pika',
    lastname: 'Chu ',
    getPokeName: function() {
        var fullname = this.firstname + ' ' + this.lastname;
        return fullname;
    }
};

var pokemon1 = {
  firstname: 'Baba',
    lastname: 'Sword ',
}

var pokemonName = function(snack, hobby) {
    console.log(this.getPokeName() + ' loves ' + snack + ' and ' + hobby);
};
//apply()
//pokemonName.apply(pokemon,['sushi','algorithms']);
//"Pika Chu  loves sushi and algorithms"

//call()
//pokemonName.call(pokemon,'sushi', 'algorithms');
//"Pika Chu  loves sushi and algorithms"

//bind()
//var letCheck = pokemonName.bind(pokemon,'sushi', 'algorithms');
//letCheck(); //"Pika Chu  loves sushi and algorithms"

//bind()
//var letCheck = pokemonName.bind(pokemon);
//letCheck('sushi', 'algorithms'); //"Pika Chu  loves sushi and algorithms"

/*//apply()
var arr1 = [1, 2, 3];
myFunc.apply(null, arr1);

function myFunc(a,b,c){
  console.log(a,b,c)
}

//using spread operator
var arr1 = [1, 2, 3];
myFunc(...arr1);

function myFunc(a,b,c){
  console.log(a,b,c)
}
*/

//push with call(), apply()
/*let vegetables = ['parsnip', 'potato'];
let moreVegs = ['celery', 'beetroot'];

Array.prototype.push.apply(vegetables,moreVegs);
console.log(vegetables);*/

//pop with call(), apply() on array-like object
let vegetables = {0: 'parsnip', 1: 'potato', 3: 'tomato', 4: 'beetroot', length: 5};

var newVeg = Array.prototype.pop.call(vegetables);
//console.log(newVeg);

//reverse with call on array-like object
let myFish = {0:'angel', 1:'clown', 2:'mandarin', 3:'sturgeon', length: 4};

var popped = Array.prototype.reverse.call(myFish); //same syntax for using apply( )
